---
name: 'Docker Build Images'
description: 'Promote a branch to a release branch'

inputs:
  dockerfile:  # Name of dockerfile to build
    description: 'Dockerfile to build'
    required: false
    default: 'Dockerfile'
  image_name: # Name of image to build.
    description: 'Docker image name (without registry or tag)'
    required: true
  registry: # registry containing the container image
    description: 'docker registry for container image (must me all lover case
                  and end in "/")'
    required: false
    default: ""
  github_token: # secret github token
    description: "github token eg. ${{ secrets.GITHUB_TOKEN }}"
    required: false
    default: ${{ secrets.GITHUB_TOKEN }}

outputs:
  image_name_tag:
    description: "full image name and tag used for the docker image"
    value: ${{ steps.name_tag.outputs.image_name_tag }}

runs:
  using: "composite"
  steps:
    ## Pulling the previous image allows us to use its layers as a cache, to
    ## reduce build times.
    - name: Debug
      id: debug
      run: |
        echo "###################################"
        echo "Action Input:"
        echo "---"
        echo "dockerfile=${{ inputs.dockerfile }}"
        echo "image_name=${{ inputs.image_name }}"
        echo "registry=${{ inputs.registry }}"
        echo "github_token=${{ inputs.github_token }}"
        echo "---"

    - name: Determine tag
      id: get_tag
      uses: MasterOfMalt/Atom.DevOps.GitHubActions/Docker_Image_GetTag@PLOPS-427_initial_draft

    ## Pulling the previous image allows us to use its layers as a cache, to
    ## reduce build times.
    - name: Pull cache layers (if any)
      id: cache
      uses: MasterOfMalt/Atom.DevOps.GitHubActions/Docker_Image_Cache@PLOPS-427_initial_draft
      with:
        image_name: ${{ inputs.image_name }}
        tag_name: ${{ steps.get_tag.outputs.tag_name }}
        registry: ${{ inputs.registry }}

    - run: echo "::set-output name=image_name_tag::${{ inputs.registry }}${{ inputs.image_name }}:${{ steps.get_tag.outputs.tag_name }}"

    - name: Build container image (no buildkit)
      run: |
        docker build . -f "${{ inputs.dockerfile }}" \
          -t "${{ inputs.registry }}${{ inputs.image_name }}:${{ steps.get_tag.outputs.tag_name }}" \
          "${{ steps.cache.outputs.setting }}"

